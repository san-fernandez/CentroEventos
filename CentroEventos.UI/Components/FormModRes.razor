@rendermode InteractiveServer
@inject ListarPersonasUseCase ListarPersonas
@inject ListarEventosDeportivosUseCase ListarEventos
@if (_visible && _reservaEditada != null)
{
    <EditForm Model="_reservaEditada" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h3 class="mt-3">
            Se va a modificar la Reserva ID: @_reservaEditada.Id
        </h3>


        <div class="form-group mt-2">
            <label for="responsable">ID de Persona:</label>
            <select class="form-select" id="responsable" @bind="_reservaEditada.PersonaId">
            <option value="">Seleccione un responsable</option>
            @foreach (var persona in PersonasDisponibles)
            {
                <option value="@persona.Id">@persona.Nombre @persona.Apellido (@persona.DNI)</option>
            }
            </select>
        </div>

        <div class="form-group mt-2">
            <label for="evento">Evento Deportivo:</label>
            <select class="form-select" id="evento" @bind="_reservaEditada.EventoDeportivoId">
            <option value="">Seleccione un evento</option>
            @foreach (var evento in EventosDisponibles)
            {
                <option value="@evento.Id">@evento.Nombre</option>
            }
            </select>
        </div>

        <div class="form-group mt-2">
            <label>Fecha Reserva</label>
            <InputDate class="form-control" @bind-Value="_reservaEditada.FechaAltaReserva" />
        </div>

        <div class="form-group mt-2">
            <label for="estado">Estado de la reserva:</label>
            <select class="form-select" id="estado" @bind="_reservaEditada.EstadoAsistencia">
            @foreach (var estado in Enum.GetValues(typeof(Estado)).Cast<Estado>())
            {
                <option value="@estado">@estado</option>
            }
            </select>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-success me-2">Confirmar</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
        </div>
    </EditForm>
}

@code {
    public Reserva? R { get; set; }
    List<Persona> PersonasDisponibles = new();
    List<EventoDeportivo> EventosDisponibles = new();
    private bool _visible = false;
    private Reserva? _reservaEditada;
    public EventCallback<Reserva> OnConfirmado { get; set; }
    protected override void OnInitialized()
    {
        PersonasDisponibles = ListarPersonas.Ejecutar();
        EventosDisponibles = ListarEventos.Ejecutar();
    }
    public void Mostrar()
    {
        if(R == null){
            
            Console.WriteLine("Error:Reserva a modificar es nula.");
            return;
        }

        _reservaEditada = new Reserva
        {
            Id = R!.Id,
            PersonaId = R.PersonaId,
            EventoDeportivoId = R.EventoDeportivoId,
            FechaAltaReserva = R.FechaAltaReserva,
            EstadoAsistencia = R.EstadoAsistencia,
        };

        _visible = true;
        StateHasChanged();
    }

    void Guardar()
    {
        _visible = false;
        if (_reservaEditada != null)
            OnConfirmado.InvokeAsync(_reservaEditada);
    }

    void Cancelar()
    {
        _visible = false;
    }
}